{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n            display: inline-block;\\n            \", \"\\n            flex-shrink: 0;\\n            line-height: 1;\\n\\n            > svg {\\n              \", \"\\n              max-height: 100%;\\n              max-width: 100%;\\n              vertical-align: bottom;\\n              \", \"\\n            }\\n          \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/** @jsx jsx */\n\n\nimport { memo } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport GlobalTheme from '@atlaskit/theme/components';\nimport { getBackground } from './utils';\nimport { getSVGStyles, getSizeStyles } from './styles';\n/**\n * We are hiding these props from consumers because they don't act as one would expect.\n */\n\nvar Icon = /*#__PURE__*/memo(function Icon(props) {\n  var _ref = props,\n      Glyph = _ref.glyph,\n      dangerouslySetGlyph = _ref.dangerouslySetGlyph,\n      primaryColor = _ref.primaryColor,\n      secondaryColor = _ref.secondaryColor,\n      size = _ref.size,\n      testId = _ref.testId,\n      label = _ref.label,\n      width = _ref.width,\n      height = _ref.height;\n  var glyphProps = dangerouslySetGlyph ? {\n    dangerouslySetInnerHTML: {\n      __html: dangerouslySetGlyph\n    }\n  } : {\n    children: Glyph ? jsx(Glyph, {\n      role: \"presentation\"\n    }) : null\n  };\n  var dimensions = getSizeStyles({\n    width: width,\n    height: height,\n    size: size\n  });\n  return jsx(GlobalTheme.Consumer, null, function (_ref2) {\n    var mode = _ref2.mode;\n    return jsx(\"span\", _extends({\n      \"data-testid\": testId,\n      role: label ? 'img' : 'presentation',\n      \"aria-label\": label ? label : undefined\n    }, glyphProps, {\n      /**\n       * The size dimensions on the span element have dubious value and can be removed\n       * when/if icon is overhauled futher. Lite Mode didn't have the capacity to deal\n       * with fully investigating the impact of this change,\n       * but in _most_ cases they are not required.\n       *\n       * @see getSizeStyles for more info\n       */\n      css: css(_templateObject(), dimensions, dimensions, getSVGStyles({\n        primaryColor: primaryColor,\n        secondaryColor: secondaryColor || getBackground(mode)\n      }))\n    }));\n  });\n});\nexport default Icon;","map":{"version":3,"sources":["/home/ubuntu/Desktop/Reactjs/lesson01/node_modules/@atlaskit/icon/dist/esm/components/Icon.js"],"names":["_extends","_taggedTemplateLiteral","_templateObject","data","memo","css","jsx","GlobalTheme","getBackground","getSVGStyles","getSizeStyles","Icon","props","_ref","Glyph","glyph","dangerouslySetGlyph","primaryColor","secondaryColor","size","testId","label","width","height","glyphProps","dangerouslySetInnerHTML","__html","children","role","dimensions","Consumer","_ref2","mode","undefined"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,sBAAP,MAAmC,8CAAnC;;AAEA,SAASC,eAAT,GAA2B;AACzB,MAAIC,IAAI,GAAGF,sBAAsB,CAAC,CAAC,oDAAD,EAAuD,mGAAvD,EAA4J,0HAA5J,EAAwR,6BAAxR,CAAD,CAAjC;;AAEAC,EAAAA,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC3C,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;AAED;;;AACA,SAASC,IAAT,QAAqB,OAArB;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,eAAzB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,UAA5C;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GAAG,aAAaP,IAAI,CAAC,SAASO,IAAT,CAAcC,KAAd,EAAqB;AAChD,MAAIC,IAAI,GAAGD,KAAX;AAAA,MACIE,KAAK,GAAGD,IAAI,CAACE,KADjB;AAAA,MAEIC,mBAAmB,GAAGH,IAAI,CAACG,mBAF/B;AAAA,MAGIC,YAAY,GAAGJ,IAAI,CAACI,YAHxB;AAAA,MAIIC,cAAc,GAAGL,IAAI,CAACK,cAJ1B;AAAA,MAKIC,IAAI,GAAGN,IAAI,CAACM,IALhB;AAAA,MAMIC,MAAM,GAAGP,IAAI,CAACO,MANlB;AAAA,MAOIC,KAAK,GAAGR,IAAI,CAACQ,KAPjB;AAAA,MAQIC,KAAK,GAAGT,IAAI,CAACS,KARjB;AAAA,MASIC,MAAM,GAAGV,IAAI,CAACU,MATlB;AAUA,MAAIC,UAAU,GAAGR,mBAAmB,GAAG;AACrCS,IAAAA,uBAAuB,EAAE;AACvBC,MAAAA,MAAM,EAAEV;AADe;AADY,GAAH,GAIhC;AACFW,IAAAA,QAAQ,EAAEb,KAAK,GAAGR,GAAG,CAACQ,KAAD,EAAQ;AAC3Bc,MAAAA,IAAI,EAAE;AADqB,KAAR,CAAN,GAEV;AAHH,GAJJ;AASA,MAAIC,UAAU,GAAGnB,aAAa,CAAC;AAC7BY,IAAAA,KAAK,EAAEA,KADsB;AAE7BC,IAAAA,MAAM,EAAEA,MAFqB;AAG7BJ,IAAAA,IAAI,EAAEA;AAHuB,GAAD,CAA9B;AAKA,SAAOb,GAAG,CAACC,WAAW,CAACuB,QAAb,EAAuB,IAAvB,EAA6B,UAAUC,KAAV,EAAiB;AACtD,QAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB;AACA,WAAO1B,GAAG,CAAC,MAAD,EAASN,QAAQ,CAAC;AAC1B,qBAAeoB,MADW;AAE1BQ,MAAAA,IAAI,EAAEP,KAAK,GAAG,KAAH,GAAW,cAFI;AAG1B,oBAAcA,KAAK,GAAGA,KAAH,GAAWY;AAHJ,KAAD,EAIxBT,UAJwB,EAIZ;AACb;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACMnB,MAAAA,GAAG,EAAEA,GAAG,CAACH,eAAe,EAAhB,EAAoB2B,UAApB,EAAgCA,UAAhC,EAA4CpB,YAAY,CAAC;AAC/DQ,QAAAA,YAAY,EAAEA,YADiD;AAE/DC,QAAAA,cAAc,EAAEA,cAAc,IAAIV,aAAa,CAACwB,IAAD;AAFgB,OAAD,CAAxD;AATK,KAJY,CAAjB,CAAV;AAkBD,GApBS,CAAV;AAqBD,CA9C2B,CAA5B;AA+CA,eAAerB,IAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n            display: inline-block;\\n            \", \"\\n            flex-shrink: 0;\\n            line-height: 1;\\n\\n            > svg {\\n              \", \"\\n              max-height: 100%;\\n              max-width: 100%;\\n              vertical-align: bottom;\\n              \", \"\\n            }\\n          \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/** @jsx jsx */\nimport { memo } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport GlobalTheme from '@atlaskit/theme/components';\nimport { getBackground } from './utils';\nimport { getSVGStyles, getSizeStyles } from './styles';\n/**\n * We are hiding these props from consumers because they don't act as one would expect.\n */\n\nvar Icon = /*#__PURE__*/memo(function Icon(props) {\n  var _ref = props,\n      Glyph = _ref.glyph,\n      dangerouslySetGlyph = _ref.dangerouslySetGlyph,\n      primaryColor = _ref.primaryColor,\n      secondaryColor = _ref.secondaryColor,\n      size = _ref.size,\n      testId = _ref.testId,\n      label = _ref.label,\n      width = _ref.width,\n      height = _ref.height;\n  var glyphProps = dangerouslySetGlyph ? {\n    dangerouslySetInnerHTML: {\n      __html: dangerouslySetGlyph\n    }\n  } : {\n    children: Glyph ? jsx(Glyph, {\n      role: \"presentation\"\n    }) : null\n  };\n  var dimensions = getSizeStyles({\n    width: width,\n    height: height,\n    size: size\n  });\n  return jsx(GlobalTheme.Consumer, null, function (_ref2) {\n    var mode = _ref2.mode;\n    return jsx(\"span\", _extends({\n      \"data-testid\": testId,\n      role: label ? 'img' : 'presentation',\n      \"aria-label\": label ? label : undefined\n    }, glyphProps, {\n      /**\n       * The size dimensions on the span element have dubious value and can be removed\n       * when/if icon is overhauled futher. Lite Mode didn't have the capacity to deal\n       * with fully investigating the impact of this change,\n       * but in _most_ cases they are not required.\n       *\n       * @see getSizeStyles for more info\n       */\n      css: css(_templateObject(), dimensions, dimensions, getSVGStyles({\n        primaryColor: primaryColor,\n        secondaryColor: secondaryColor || getBackground(mode)\n      }))\n    }));\n  });\n});\nexport default Icon;"]},"metadata":{},"sourceType":"module"}